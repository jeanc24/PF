plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id("io.freefair.lombok") version "8.12.2.1"
    id 'com.google.protobuf' version '0.9.4' //plugin para incluir la compilación de gRPC, ver: https://github.com/grpc/grpc-java#generated-code
    id 'idea' //plugins para la integración con el IDEA.
}

group = 'edu.pucmm.icc352'
version = '1.0-SNAPSHOT'

application {
    mainClassName = 'edu.pucmm.icc352.Main'
}

repositories {
    mavenCentral()
    maven {
        url = uri("https://maven.reposilite.com/snapshots")
    }
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    //J A V A L I N
    implementation("io.javalin:javalin:6.5.0")

    // S L F 4 J
    implementation("org.slf4j:slf4j-simple:2.0.11")

    //template engine dependency
    implementation("io.javalin:javalin-rendering:6.4.0")

    //thymeleaf
    implementation 'org.thymeleaf:thymeleaf:3.1.3.RELEASE'

    // ENCRYPTING
    implementation 'org.jasypt:jasypt:1.9.3'

    // Jasypt para encriptación
    implementation 'org.jasypt:jasypt:1.9.3'

    // Jakarta Servlet API (necesario para HttpServletRequest y HttpServletResponse)
    implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'

    // Jasypt Spring Security (para StrongPasswordEncryptor)
    implementation 'org.jasypt:jasypt-springsecurity4:1.9.3'

    //Procesamiento JSON para Javalin.
    implementation("com.fasterxml.jackson.core:jackson-core:2.15.2")
    implementation('com.fasterxml.jackson.core:jackson-databind:2.15.2')
    implementation("com.fasterxml.jackson.core:jackson-annotations:2.15.2")

    // Gson
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'

    // https://mvnrepository.com/artifact/org.mongodb/mongodb-driver-sync
    implementation group: 'org.mongodb', name: 'mongodb-driver-sync', version: '4.11.1'

    // For Java projects
    annotationProcessor("io.javalin.community.openapi:openapi-annotation-processor:6.5.0")
    implementation("io.javalin.community.openapi:javalin-openapi-plugin:6.5.0") // for /openapi route with JSON scheme
    implementation("io.javalin.community.openapi:javalin-swagger-plugin:6.5.0") // for Swagger UI
    implementation("io.javalin.community.openapi:javalin-redoc-plugin:6.5.0") // for ReDoc UI

    // Morphia odm
    implementation 'dev.morphia.morphia:morphia-core:2.3.9'

    // Definir la versión de OpenAPI como variable
    def openapi = "6.5.0"

    // For Java projects
    annotationProcessor("io.javalin.community.openapi:openapi-annotation-processor:$openapi")

    implementation("io.javalin.community.openapi:javalin-openapi-plugin:$openapi") // for /openapi route with JSON scheme
    implementation("io.javalin.community.openapi:javalin-swagger-plugin:$openapi") // for Swagger UI
    implementation("io.javalin.community.openapi:javalin-redoc-plugin:$openapi") // for ReDoc UI

    //parser for UserAgents Header
    implementation 'com.github.ua-parser:uap-java:1.6.1'


    //Libreria para JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'




    //Librerías necesarias para para implementar gRPC y Protobuf, ver: https://github.com/grpc/grpc-java
    runtimeOnly 'io.grpc:grpc-netty-shaded:1.62.2'
    implementation 'io.grpc:grpc-protobuf:1.62.2'
    implementation 'io.grpc:grpc-stub:1.62.2'
    implementation 'io.grpc:grpc-services:1.62.2' // Para habilitar la reflexión del servidor https://github.com/grpc/grpc-java/blob/master/documentation/server-reflection-tutorial.md#enable-server-reflection
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53' // necessary for Java 9+
    implementation 'com.google.protobuf:protobuf-java:3.25.3'

}

shadowJar{
    archiveBaseName.set("app")
    archiveClassifier.set('')
    archiveVersion.set('')
}

/**
 * tarea necesaria para heroku si optamos por la tarea de Shadowjar
 * en el archivo Procfile debe estar el siguiente comando:
 * web: java -jar build/libs/app.jar
 */
task stage {
    dependsOn shadowJar
}

test {
    useJUnitPlatform()
}


//Tareas para la generación del código.
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.25.1"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.62.2'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }

    //generatedFilesBaseDir = "$projectDir/generated"
}

//Tareas para integrar con el
clean {
    delete protobuf.generatedFilesBaseDir
}

idea {
    module {
        // proto files and generated Java files are automatically added as
        // source dirs.
        // If you have additional sources, add them here:
        sourceDirs += file("src/generated");
    }
}
